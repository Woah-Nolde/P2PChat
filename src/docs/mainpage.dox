/**
@mainpage SLCP Chat-System - Technische Dokumentation

![Projektlogo](Logo.png){ width=200px }


@section intro_sec Einführung
Das **Simple Local Chat Protocol (SLCP) Chat-System** ist eine dezentrale Peer-to-Peer-Anwendung für lokale Netzwerke. 
Es ermöglicht die direkte Kommunikation zwischen Clients ohne zentrale Server-Infrastruktur.

@image html architecture.png "Systemarchitektur" width=800px

@section features_sec Hauptfunktionen 
- **Dezentrale Architektur**: Peer-to-Peer-Kommunikation ohne Server
- **Textnachrichten**: Echtzeit-Nachrichtenaustausch
- **Bildübertragung**: Versendung von Bilddateien
- **Automatische Nutzerermittlung**: Discovery-Service für Teilnehmer
- **Abwesenheitsmodus**: Automatische Antworten (Autoreply)
- **Konfigurierbar**: TOML-basierte Konfigurationsdatei
- **Plattformunabhängig**: Python-basierte Implementierung

@section arch_sec Systemarchitektur
Das System basiert auf einer **3-Schichten-Architektur**:

/**
@subsection components_sec Komponenten
- @ref main.py "**Hauptmodul (main.py)**" - Koordiniert alle Komponenten
- @ref messenger.py "**Messenger (messenger.py)**" - Implementiert SLCP-Protokoll  
- @ref discovery.py "**Discovery Service (discovery.py)**" - Teilnehmererkennung
- @ref config_manager.py "**Konfiguration (config_manager.py)**" - TOML-Verwaltung
- @ref cli.py "**CLI Interface (cli.py)**" - Benutzerinteraktion

@section protocol_sec SLCP-Protokoll
Das **Simple Local Chat Protocol** definiert:

| Befehl     | Funktion               | Beispiel                     |
|------------|------------------------|------------------------------|
| JOIN       | Anmeldung              | `JOIN Alice 5000`            |
| LEAVE      | Abmeldung              | `LEAVE Alice`                |
| WHO        | Teilnehmersuche        | `WHO`                        |
| KNOWUSERS  | Teilnehmerantwort      | `KNOWUSERS Alice 192.168.1.42 5000` |
| MSG        | Textnachricht          | `MSG Bob "Hallo Welt"`       |
| IMG        | Bildnachricht          | `IMG Bob 1024`               |

@section usage_sec Schnellstart
1. **Konfiguration**: Bearbeite `config.toml`
2. **Start**: `python3 main.py`
3. **Teilnehmer finden**: `who`
4. **Nachricht senden**: `send <handle> <nachricht>`
5. **Bild senden**: `img <handle> <pfad>`

@section install_sec Installation
@verbinclude INSTALL.md

@section dev_sec Entwicklung
- **Sprache**: Python 3.8+
- **Protokoll**: UDP/TCP basiert
- **IPC**: Multiprocessing Queues
- **Konfiguration**: TOML-Format
- **Dokumentation**: Doxygen + Graphviz

@section license_sec Lizenz
@verbinclude LICENSE

@author Noah Wolde Suphi Dogruel, Sebastian Stautz , Issa Waheed, Khanh-Tam Vu
@date 22.06.2025 Sommersemester 2025
@version 1.0

@see @ref architecture_page "Systemarchitektur"
@see @ref protocol_page "SLCP-Protokoll"  
@see @ref usage_page "Bedienungsanleitung"
*/