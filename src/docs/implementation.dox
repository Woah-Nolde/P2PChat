/**
@page implementation_page Implementierung des SLCP Chat-Systems

@tableofcontents

@section impl_overview Überblick

Das SLCP (Simple Local Chat Protocol) Chat-System wurde als dezentrale Peer-to-Peer-Anwendung entwickelt, die direkte Kommunikation zwischen Clients in lokalen Netzwerken ermöglicht. Die Implementierung basiert auf einer modularen 3-Prozess-Architektur mit separaten Komponenten für Benutzerinteraktion, Netzwerkkommunikation und Teilnehmererkennung.

@section impl_architecture Systemarchitektur

@subsection impl_arch_overview Architektur-Überblick

Die Anwendung implementiert eine strikte Trennung der Verantwortlichkeiten durch drei eigenständige Prozesse:

- **Hauptprozess (main.py)**: Koordiniert alle Komponenten und stellt die CLI-Schnittstelle bereit
- **Netzwerkprozess (messenger.py)**: Implementiert das SLCP-Protokoll für die direkte Client-zu-Client-Kommunikation
- **Discovery-Prozess (discovery.py)**: Verwaltet die automatische Teilnehmererkennung über Broadcast-Nachrichten

@subsection impl_arch_ipc Inter-Process Communication (IPC)

Die Kommunikation zwischen den Prozessen erfolgt über Python Multiprocessing Queues:

```
Queue-Mapping:
ui_to_net    : CLI → Netzwerk (Nachrichten senden)
net_to_ui    : Netzwerk → CLI (Empfangene Nachrichten)
net_to_disc  : Netzwerk → Discovery (WHO-Anfragen)
disc_to_net  : Discovery → Netzwerk (Antworten)
disc_to_ui   : Discovery → CLI (Statusmeldungen)
```

Die IPC-Architektur ermöglicht asynchrone Verarbeitung und verhindert Blockierungen der Benutzeroberfläche.

@section impl_protocol SLCP-Protokoll Implementation

@subsection impl_protocol_structure Protokollstruktur

Das SLCP-Protokoll wurde als textbasiertes UDP-Protokoll implementiert mit folgenden Nachrichtentypen:

| Befehl | Format | Beschreibung |
|--------|--------|--------------|
| JOIN | `JOIN <handle> <port>` | Anmeldung im Netzwerk |
| LEAVE | `LEAVE <handle>` | Abmeldung vom Netzwerk |
| WHO | `WHO` | Anfrage aktiver Teilnehmer |
| KNOWUSERS | `KNOWUSERS <user_list>` | Antwort auf WHO-Anfrage |
| MSG | `MSG <handle> <text>` | Textnachricht |
| IMG | `IMG <handle> <size>` | Bildübertragung (Header) |

@subsection impl_protocol_discovery Discovery-Mechanismus

Der Discovery-Service implementiert einen Singleton-Pattern pro Host:

```python
def ensure_singleton(port, disc_to_ui):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        sock.bind(('', port))
        sock.close()
    except OSError:  
        disc_to_ui.put({"type":"singleton", "text":f"Discovery läuft bereits"})
        exit()
```

Die Teilnehmerverwaltung erfolgt über ein Dictionary `clients = {handle: (ip, port)}`, welches automatisch Handle-Kollisionen durch Nummerierung auflöst.

@subsection impl_protocol_messaging Nachrichtenübertragung

Textnachrichten werden direkt zwischen Clients über UDP übertragen. Die Implementierung verwendet Leerzeichen-Maskierung (%20) für mehrteilige Nachrichten:

```python
def send_msg(target_ip, target_port, target_handle, text):
    text_masked = text.replace(" ", "%20")
    msg = f"MSG {target_handle} {text_masked}"
    if len(msg) > 512:
        raise ValueError("Nachricht zu lang")
```

@subsection impl_protocol_images Bildübertragung

Bilder werden in einem zweistufigen Verfahren übertragen:
1. **Header**: `IMG <handle> <size>` mit Metadaten
2. **Binärdaten**: Aufgeteilt in 512-Byte-Blöcke

Die Implementierung begrenzt Bildgrößen auf 50 KB und speichert empfangene Bilder automatisch im `src/image/` Verzeichnis.

@section impl_components Komponenten-Implementation

@subsection impl_main Hauptmodul (main.py)

Das Hauptmodul koordiniert alle Systemkomponenten und implementiert die CLI-Schnittstelle:

**Kern-Funktionalitäten:**
- Prozess-Management für Netzwerk und Discovery
- CLI-Command-Parser für Benutzereingaben
- Konfigurationsverwaltung über TOML-Dateien
- Handle-Management mit automatischer Neuvergabe
- Abwesenheitsmodus mit Autoreply-Funktionalität

**Threading-Modell:**
```python
thread = threading.Thread(target=show_net_and_disc_messages, 
                         args=(disc_to_ui, net_to_ui, handle, port, ui_to_net))
thread.daemon = True
thread.start()
```

@subsection impl_messenger Netzwerkmodul (messenger.py)

Das Netzwerkmodul implementiert das SLCP-Protokoll und verwaltet die Client-zu-Client-Kommunikation:

**Parser-Implementation:**
```python
def parse_slcp(message):
    if message.startswith("MSG"):
        parts = message[4:].split(" ", 1)
        if len(parts) == 2:
            sender = parts[0]
            text = parts[1].replace("%20", " ")
            return ("MSG", sender, text)
```

**Asynchroner Empfang:**
- Separater Thread für `receive_messages()`
- Dual-Mode für Text/Binärdaten-Verarbeitung
- Automatische Bildrekonstruktion aus Fragmenten

@subsection impl_discovery Discovery-Service (discovery.py)

Der Discovery-Service implementiert eine zentrale Teilnehmerverwaltung pro Subnet:

**Handle-Kollisions-Auflösung:**
```python
while handle in clients:             
    if not handle[-1].isdigit():
        handle = f"{handle}2"
    else:
        num = int(handle[-1]) + 1
        handle = f"{orig_handle}{num}"
```

**Broadcast-Events:**
- `USERJOIN`: Benachrichtigung über neue Teilnehmer
- `USERLEAVE`: Benachrichtigung über Abmeldungen  
- `HANDLE_UPDATE`: Information über Handle-Änderungen

@section impl_configuration Konfigurationssystem

Die Konfiguration erfolgt über TOML-Dateien mit folgender Struktur:

```toml
[user]
handle = "DefaultUser"
autoreply = "Bin gerade nicht da"

[network]
port_range = [5000, 5100]
whoisport = 4000

[files]
imagepath = "./received_images"
```

Das Konfigurationssystem unterstützt:
- Laufzeit-Änderungen ohne Neustart
- Validierung der Eingaben
- Automatische Standardwerte

@section impl_features Erweiterte Funktionalitäten

@subsection impl_autoreply Abwesenheitsmodus

Der Abwesenheitsmodus implementiert automatische Antworten:

```python
if abwesend and typ2 == "MSG":
    text2 = config["user"]["autoreply"]
    net_to_ui.put({"type": "condition", "sender": sender2, "text": text2})
```

@subsection impl_portfinding Automatische Port-Zuweisung

Das System findet automatisch freie Ports im konfigurierten Bereich:

```python
def find_free_port(start_port, end_port):
    for port in range(start_port, end_port + 1):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.bind(('', port))
            sock.close()
            return port
        except OSError:
            continue
```

@section impl_reliability Zuverlässigkeit und Fehlerbehandlung

@subsection impl_error_handling Fehlerbehandlung

Das System implementiert robuste Fehlerbehandlung auf mehreren Ebenen:

- **Socket-Fehler**: Automatische Fallbacks und Retry-Mechanismen
- **Parsing-Fehler**: Graceful Degradation bei fehlerhaften Nachrichten
- **Dateisystem-Fehler**: Validierung vor Bild-Operationen
- **Netzwerk-Timeouts**: Konfigurierbare Zeitlimits für Discovery

@subsection impl_concurrency Nebenläufigkeit

Die Anwendung verwendet verschiedene Concurrency-Patterns:

- **Multiprocessing**: Für Prozess-Isolation (Discovery, Network, UI)
- **Threading**: Für asynchrone I/O-Operationen innerhalb der Prozesse
- **Queue-basierte Kommunikation**: Für thread-sichere IPC

@section impl_limitations Bekannte Limitierungen

@subsection impl_limitations_network Netzwerk-Beschränkungen

- **IPv6-Unterstützung**: Rudimentär implementiert, nicht vollständig getestet
- **NAT-Traversal**: Keine Unterstützung für komplexe Netzwerk-Topologien
- **Maximale Teilnehmer**: Nicht explizit begrenzt, praktische Grenzen durch Broadcast-Load

@subsection impl_limitations_protocol Protokoll-Beschränkungen

- **Nachrichtengröße**: Begrenzt auf 512 Zeichen für Textnachrichten
- **Bildformate**: Keine Format-Validierung, alle Binärdaten als "Bild" behandelt
- **Verschlüsselung**: Keine Implementierung von Sicherheitsfeatures

@section impl_problems_solutions Entwicklungs-Herausforderungen und Lösungsansätze

@subsection impl_problem_1 Problem: Handle-Kollisionen
**Herausforderung**: Mehrere Clients mit identischen Handles führten zu Konflikten im Netzwerk.
**Lösung**: Implementierung einer automatischen Nummerierung (z.B. "Alice" → "Alice2", "Alice3" etc.) mit folgenden Code-Änderungen:
```python
while handle in clients:
    if not handle[-1].isdigit():
        handle = f"{handle}2"
    else:
        num = int(handle[-1]) + 1
        handle = f"{orig_handle}{num}"

@subsection impl_problem_1 Problem: Handle-Kollisionen
**Herausforderung**: Mehrere Clients mit identischen Handles führten zu Konflikten.
**Lösung**: Implementierung einer automatischen Nummerierung (Alice → Alice2, Alice3, ...)

@subsection impl_problem_2 Problem: Race Conditions bei Discovery
**Herausforderung**: Parallele JOIN-Nachrichten führten zu inkonsistenten Zuständen.
**Lösung**: Einführung von Verzögerungen und Event-Broadcasting über separaten Port.

... Weitere Probleme und Lösungen hier dokumentieren ...
-->
@subsection impl_problem Problem: fehlerhafte Kommunikation zwischen Prozessen mit Queues
**Herausforderung**: 
- Unklar welcher Instanz eine Nachricht zu übertragen bei IPC 
- HANDLE_UPDATE kann von fremden discovery geschickt werden. Zu beginn kennt der eigene discovery nur einen selbst

**Lösungsansatz**:
Implementierung eines discovery listener Port(4001):

```python
def discovery_listener(net_to_ui, my_port):
    """
    Lauscht auf Discovery-Broadcast-Nachrichten (z.B. USERJOIN, USERLEAVE) und leitet sie per IPC weiter.
    """
    DISCOVERY_EVENT_PORT = 4001 # Zusätzlich zu Port 4000 (JOIN/WHO/LEAVE)

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind(('', DISCOVERY_EVENT_PORT))

@section impl_testing Test-Strategie

@subsection impl_testing_approach Testansatz

Die Implementierung wurde durch verschiedene Testszenarien validiert:

- **Unit-Tests**: Parser-Funktionen und Protokoll-Validierung
- **Integration-Tests**: Inter-Process-Communication zwischen Komponenten  
- **Netzwerk-Tests**: Multi-Client-Szenarien in lokalen Netzwerken
- **Edge-Case-Tests**: Fehlerbehandlung und Grenzfälle

@subsection impl_testing_scenarios Test-Szenarien

1. **Basis-Kommunikation**: Nachrichten zwischen zwei Clients
2. **Multi-Client**: Bis zu 3 simultane Teilnehmer
3. **Bildübertragung**: Verschiedene Dateigrößen und Formate
4. **Discovery-Tests**: Join/Leave-Zyklen und Handle-Kollisionen
5. **Fehlerszenarien**: Netzwerk-Unterbrechungen und ungültige Eingaben

@section impl_performance Performance-Charakteristika

@subsection impl_performance_metrics Leistungskennzahlen

- **Startup-Zeit**: < 1 Sekunde für alle Prozesse
- **Message-Latenz**: < 50ms in lokalen Netzwerken
- **Discovery-Zeit**: < 2 Sekunden für Teilnehmer-Erkennung
- **Bildübertragung**: ~1 MB/s für lokale Netzwerke
- **Memory-Footprint**: < 20 MB pro Client-Instanz

@subsection impl_performance_bottlenecks Performance-Engpässe

- **UDP-Buffer-Größe**: Begrenzt durch 1024-Byte-Puffer
- **Broadcast-Storm**: Potentielle Überlastung bei vielen simultanen Clients
- **Disk-I/O**: Bildverarbeitung blockiert Netzwerk-Thread

@section impl_future_work Erweiterungs-Möglichkeiten

@subsection impl_future_features Geplante Features

- **Gruppennachrichten**: Multicast-basierte Gruppen-Kommunikation
- **Dateiübertragung**: Generische Datei-Transfers (nicht nur Bilder)
- **Verschlüsselung**: End-to-End-Verschlüsselung für sichere Kommunikation
- **GUI-Interface**: Grafische Benutzeroberfläche zusätzlich zur CLI
- **Persistence**: Nachrichtenverlauf und Kontaktlisten

@subsection impl_future_improvements Verbesserungen

- **Robusteres Protokoll**: Acknowledgments und Retry-Mechanismen
- **IPv6-Vollunterstützung**: Native IPv6-Implementierung
- **NAT-Traversal**: STUN/TURN-Server-Integration
- **Mobile-Support**: Android/iOS-Portierung
- **Skalierbarkeit**: Optimierung für größere Netzwerke

@section impl_conclusion Fazit

Die Implementierung des SLCP Chat-Systems demonstriert eine funktionsfähige Peer-to-Peer-Kommunikationslösung für lokale Netzwerke. Die modulare Architektur mit separaten Prozessen für UI, Netzwerk und Discovery ermöglicht eine klare Trennung der Verantwortlichkeiten und erleichtert Wartung und Erweiterungen.

Die gewählten Technologien (Python, UDP, Multiprocessing) bieten eine gute Balance zwischen Entwicklungsgeschwindigkeit und Systemleistung für die Zielanwendung in lokalen Netzwerkumgebungen.

@author Noah Wolde Suphi Dogruel, Sebastian Stautz , Issa Waheed, Khanh-Tam Vu
@date 22.06.2025 Sommersemester 2025
@version 1.0

@see @ref architecture_page "Systemarchitektur"
@see @ref protocol_page "SLCP-Protokoll-Spezifikation"
*/
