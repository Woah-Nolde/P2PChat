/**
@page architecture_page Systemarchitektur

@tableofcontents

@section design_principles Entwurfsprinzipien
Das SLCP Chat-System folgt einer **modularen 3-Schichten-Architektur**:
1. **Präsentationsschicht**: CLI für Benutzerinteraktion
2. **Netzwerkschicht**: SLCP-Protokollimplementierung
3. **Service-Schicht**: Discovery-Service und Broadcast-Handling

@section overall_architecture Gesamtarchitektur
@startuml
!theme plain
skinparam componentStyle rectangle
skinparam monochrome true

package "Client A" {
    [CLI A] as CLIA <<UI>>
    [Messenger A] as MSGA <<Network>>
    [Discovery A] as DISCA <<Service>>
}

cloud "UDP Broadcast\\n(Port 4000)" as BROAD
cloud "Direct UDP\\n(Port 5000+)" as DIRECT

CLIA -r-> MSGA : IPC Queue\nui_to_net
MSGA -r-> DISCA : IPC Queue\nnet_to_disc
DISCA --> BROAD : JOIN/LEAVE/WHO
MSGA --> DIRECT : MSG/IMG

note right of BROAD
  **Broadcast-Nachrichten**:
  - JOIN
  - LEAVE
  - WHO
end note

note left of DIRECT
  **Unicast-Nachrichten**:
  - MSG (Text)
  - IMG (Bilder)
end note
@enduml

@section process_architecture Prozessmodell
Jeder Client besteht aus drei Prozessen:
@startuml
!theme plain
skinparam monochrome true

component "CLI Process" as CLI <<UI>>
component "Messenger Process" as MSG <<Network>>
component "Discovery Process" as DISC <<Service>>

CLI -> MSG : ui_to_net
MSG -> CLI : net_to_ui
MSG -> DISC : net_to_disc
DISC -> MSG : disc_to_net
DISC -> CLI : disc_to_ui

note right of CLI
  **Aufgaben**:
  - Kommandointerpretation
  - Nachrichtendarstellung
  - Konfigurationsmanagement
end note
@enduml

@section ipc_communication IPC-Queues
@startuml
!theme plain
skinparam rectangle {
    BackgroundColor White
    BorderColor Black
}

queue "ui_to_net" as Q1 {
  [CLI Kommandos]
  [Nachrichten]
}

queue "net_to_ui" as Q2 {
  [Empfangene Nachrichten]
  [Systemmeldungen]
}

queue "net_to_disc" as Q3 {
  [WHO-Anfragen]
}

queue "disc_to_net" as Q4 {
  [KNOWUSERS]
  [Teilnehmerupdates]
}

queue "disc_to_ui" as Q5 {
  [Statusmeldungen]
}

CLI -r-> Q1
Q1 -r-> MSG
MSG -r-> Q2
Q2 -r-> CLI
MSG -u-> Q3
Q3 -u-> DISC
DISC -l-> Q4
Q4 -l-> MSG
DISC -d-> Q5
Q5 -d-> CLI
@enduml

@subsection queue_examples Beispielnachrichten
**Kommando-Queue (ui_to_net):**
```json
{"type": "WHO"}
{"type": "MSG", "target": "Alice", "text": "Hallo!"}

{"type": "message", "from": "Bob", "text": "Hi!"}
{"type": "userlist", "users": ["Alice", "Bob"]}


@section network_protocol Protokollstack
@startuml
!theme plain
skinparam nodesep 10

frame "Anwendungsschicht" {
[SLCP-Parser]
[Nachrichtenrouter]
}

frame "Transportschicht" {
[UDP-Sender/Empfänger]
}

frame "Netzwerkschicht" {
[IP-Handler]
}

[SLCP-Parser] --> [Nachrichtenrouter]
[Nachrichtenrouter] --> [UDP-Sender/Empfänger]
[UDP-Sender/Empfänger] --> [IP-Handler]
@enduml

@section data_flow Datenfluss

Ausgehende Nachrichten
@startuml
!theme plain
skinparam monochrome true

start
:CLI empfängt Nutzereingabe;
if (Befehlsart?) then (Broadcast)
:An Discovery senden;
:UDP-Broadcast;
else (Unicast)
:Direkte UDP-Nachricht;
endif
:Logging;
stop
@enduml

Eingehende Nachrichten
@startuml
!theme plain
skinparam monochrome true

start
:UDP-Empfang;
if (Nachrichtentyp?) then (Discovery)
:Discovery verarbeitet;
else (Nachricht)
:CLI anzeigen;
endif
:Logging;
stop
@enduml

@section configuration Konfiguration

# config.toml
[user]
handle = "Alice"
autoreply = "Ich bin gerade nicht da."

[network]
port_range = [5000, 5010]
whois_port = 4000

[paths]
image_dir = "./image"

@subsection error_handling Fehlerbehandlung

Netzwerkfehler: Automatische Retry-Logik mit exponentiellem Backoff

Invalid Messages: Protokollierung und Verwerfung

Resource Limits: Queue-Größenbeschränkungen

@warning Sicherheitshinweis: Keine Verschlüsselung - nur für vertrauenswürdige Netzwerke!

@author Noah Wolde Suphi Dogruel, Sebastian Stautz , Issa Waheed, Khanh-Tam Vu
@date 22.06.2025 Sommersemester 2025
@version 1.0
*/